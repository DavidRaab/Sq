# PODNAME: Sq
# ABSTRACT: The Sq Language

__END__

=pod

=encoding UTF-8

=head1 NAME

Sq - The Sq Language

=head1 SYNOPSIS

What is a programming language? The foundation of every programming language
are the data-structures the language provides you by default. The default
data-structures and their possibilites shape how you will build a solution.

Sq is a module that provides certain data-structures. Those data-structures
are meant as a replacement for the built-in Perl data-structures. But replacing
those data-structures will change the way how you code.

Sq currently provides a lazy sequence C<Seq>, extension for C<Array>, C<Hash>,
a C<Queue>, C<List> and a C<Heap> data-structure.

It uses an C<Option> and C<Result> type for representing the absence of values
or representing B<Ok/Err> values.

It is planned to implement B<Discriminated Unions>.

Instead of classes, typing is done with an Structural Typing approach. It is
available under C<Sq::Type> but not completed and documented yet.
This can be used as an argument validator or even as a testing tool.

Under C<Sq::Parser> there is a Combinator based approach to parsing. It
is already usuable and can be used for certain things but sill lacks some
features like useful error-messages.

C<Sq> don't invent new syntax, it just uses Perl as much as possible. It
is also implemented in pure Perl so far.

The idea of C<Sq> is to combine procedural and functional programming and
stick to a design that splits Data from Code. Because it leads to better
software, is easier to develop and has more reusable code.

The whole point is that it offers all basic operations you usually do in Perl
like reading files, directories, parsing in general, parsing arguments, testing
and a lot of other stuff in it's own System that uses the provided data-structures
like C<Seq>, C<Array>, C<Option> and C<Result> so you can use it as a foundation
to develop more abstract things without re-implementing the basics again and again.

=head1 IMPORTED FUNCTIONS

=head2 sq($any) : $any

Recursively traverses through a data-structure and adds Array/Hash blessings to
the data-structure. Also traverses into Option values.

    my $album = sq {
        artist => 'Michael Jackson',
        title  => 'Thriller',
        tracks => [
            {title => "Wanna Be Startinâ€™ Somethin", duration => 363},
            {title => "Baby Be Mine",               duration => 260},
            {title => "The Girl Is Mine",           duration => 242},
            {title => "Thriller",                   duration => 357},
            {title => "Beat It",                    duration => 258},
            {title => "Billie Jean",                duration => 294},
            {title => "Human Nature",               duration => 246},
            {title => "P.Y.T.",                     duration => 239},
            {title => "The Lady in My Life",        duration => 300},
        ],
    };

    # 3
    my $length = $album->length;

    # 2559
    my $album_runtime = $album->get('tracks')->map(sub ($tracks) {
        $tracks->sum_by(key 'duration');
    })->or(0);

    # same as
    my $album_runtime = assign {
        my $sum    = 0;
        my $tracks = $album->{tracks};
        if ( defined $tracks ) {
            for my $track ( @$tracks ) {
                $sum += $track->{duration};
            }
        }
        return $sum;
    };

=head2 Some($x) : $opt_x

Creates an optional value containing $x. See L<Sq::Core::Option>. The value
C<undef> returns C<None>.

    my $opt = Some(10);           # Some(10)
    my $opt = Some(Array->new);   # Some([])
    my $opt = Some(undef);        # None

Options cannot be wrapped, this is a feature. This means you can wrap the result
of a function call and always get an Option back. The calling function is allowed
to either return a value/undef or an Option and you don't have to care what
is exactly returned, you just get an option back.

    my $opt = Some( function() ); # Some/None

=head2 None : $opt

Creates an optional value that indicates the absence of any value.

    my $opt = None();
    my $opt = None;

=head2 Ok($x) : $result_x

Creates a value that additionally contains the information of beeing
sucessful/valid/ok. See L<Sq::Core::Result>. This is very similar to C<Some>.
The difference is that the B<Err> case also can contain a value.

    my $result = Ok(10);
    my $result = Ok([]);
    my $result = Ok("data found");

=head2 Err($x) : $result_x

Creates a value that additionally contains the information of beeing
an error.

    my $result = Err(10);
    my $result = Err([]);
    my $result = Err("data not found");

=head2 is_num($str) : $bool

returns a truish value if C<$str> is a number.

=head2 is_str($str) : $bool

returns a truish value if C<$str> is a string.

=head2 key($name) : $f_key_of_hash

returns a function that selects the specified key from a hash.

    sub key($name) { sub($hash) { return $hash->{$name} } }

=head2 call($method, @args) : $f

returns a function that calls C<$method> on an object with C<@args> arguments.

    my $data = sq [
        [1,2,3],
        [4,5,6],
        [7,8,9],
    ];

    my $array = $data->map(call 'sum');                  # [6,15,24]
    my $array = $data->map(sub($array) { $array->sum }); # [6,15,24]

    my $add1 = sub($x) { $x + 1 };
    my $aoa  = $data->map(call 'map', $add1);
    my $aoa  = $data->map(sub ($array) { $array->map($add1) });
    # [
    #     [2,3,4],
    #     [5,6,7],
    #     [8,9,10],
    # ]

=head2 assign

This allows you to easily create a new scope where you can defined
temporarily variables. The last expression of C<assign { ... }> is
returned.

    my $value = assign {
        my $x = ...  # code to compute $x
        my $y = ...  # code to compute $y
        $x + $y;
    };

Same as

    my $value;
    {
        my $x  = ...  # code to compute $x
        my $y  = ...  # code to compute $y
        $value = $x + $y;
    }

=head2 id($x) : $x

return its input as-is

    sub id($x) { return $x }

=head2 fst($array) : $x0

return the first element of an array

    sub fst($array) { return $array->[0] }

=head2 snd($array) : $x1

return the second element of an array

    sub snd($array) { return $array->[1] }

=head1 AUTOMATICALLY LOADED MODULES

=over 4

=item L<Sq::Core::Option>

=item L<Sq::Core::Result>

=item L<Sq::Io>

=item L<Sq::Collections::Seq>

=item L<Sq::Collections::Array>

=item L<Sq::Collections::Hash>

=item L<Sq::Collections::Queue>

=item L<Sq::Collections::List>

=item L<Sq::Collections::Heap>

=back

=head1 Implemented

=over 4

=item L<Sq::Type>

=item L<Sq::Parser>

=back
