=head1 Immutability

Here is what I think about Immutability.

The first time i came into contact with immutability was while learning
Moose as soon it came out. I used it immediately when it came out. There
I learned about immutability and to make objects 'read-only'.

At first, i didn't understand the concept. How can you compute something
without changing anything?

I mean, even for a simple loop you need a way to change a value, or not?

Later I understood the concept better. It's more about creating new things,
creating new data instead of trying to change the current state.

The whole point of immutability in itself is actually lesser important. I
realized that the more important aspect is that we don't change data after
we think we are "done" building whatever we wanted to build.

People new to immutability will often say: Isn't that too slow? The answer is
yes and no, or *it depends*. It depends on what you do. When you try to built
an immutable array by let's say whenever you add one element you do a whole
copy of an array and then add one element, then yes, it can become very slow.

When you add 10.000 values to an array and while doing so you created 9.999
arrays and all of them was copies, it is very slow.

That's why there exists special immutable data-structures. Very often there
are (binary) trees and operation can be done in O(log N) time. But there is
also another alternative that Perl users should be familar with.

Just use an mutable data-structure, built something, and then *lock it*. Or
just don't change it anymore after certain kind of operations.

In fact, Perl developers should knew well. We have functions like C<map>,
C<grep> and C<sort> built-in, and all of those create new arrays instead of
manipulating an existing one. So we usually get a new array, a copy with
modification done, and still we don't have an immutable data-structure
or the whole array was re-created after every new element.

Actually, this kind of working can even be faster at some places than using
an immutable data-structure.

When immutability stills seems strange to you, let's get into it.

=head2 Easy example

An easy example to understand Immutability is to understand

    my $x      = 10;
    my $y      = 5;
    my $result = $x + $y;

Here we also wouldn't expect that adding C<$x + $y> changes C<$x> or C<$y>.
They stay the same. This is what you can do with every operation!

And still, i can do.

    $x = 20;

But consider that this is more changing the variable. Here C<$x> is just a named
slot in your computer memory. And this slot can change. But the value C<20>
still stays the same.

Consider that C<+> is just a function. Like any other. But most languages
decides to threat some functions more special, so C<+> can be written between
two values. In Lisp for example this is not special. When Perl wouldn't
have decided to make this special it would just look like this.

    my $result = +($x, $y);

Nothing different to any other function call with a name.

    my $result = whatever($x, $y);

=head2 Pure Functions

In functional programming there is the concept of B<Pure Functions>. A function
is condered B<Pure> when a function always returns the same values for the same
input. And it never changes its input values, or does some other effect like
printing, writing, usually everything that is considered as IO (Input-Output).

Another way to think about B<Pure Functions> is that when you can cache the result
of a function, and just use the result, and don't call the function again, and
your program still works unaffected, then it is a B<Pure Function>.

But it doesn't matter if the values it receives or returns are mutable.

A function that get's a mutable array, but never changes that mutable array
and returns something completely new, is also a pure function.

Immutable data-structures forces you to write pure functions, but that doesn't
mean you must use immutable data-structures to create C<Pure Functions>. For
example the built-in C<map>, C<grep> or C<sort> functions in Perl can be
considered C<Pure Functions>.

=head2 Cache / Memoize

Caching as a side-effect. Describe why a cached function is still B<Pure>.

=head2 Hash is a function

Data as a function. A function with a single input and a single output can
be cached in a Hash. It's a simple key to value mapping.

The problem is that we don't have enough memory for this.

=head2 Recursion

Describe a loop with recursion.

=head2 Loop

Describe how it get's transformed during compilation.

=head2 Recursion to Iteration

Describe How every recursive function can be transformed into an iterative loop.

=head2 Costs/Benefits of immutability

=head2 Chaining

When immutable data only is consumed by a single output to input
function than the whole change of operations could be done
on a mutable data-structure.

=head2 Owner of data?

Why returning mutable data from a function is completely fine.
