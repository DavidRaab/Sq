# PODNAME: Seq
# ABSTRACT: What is Seq, and how do I use it?

__END__

=head1 NAME

Seq - A lazy sequence implementation

=head1 SYNOPSIS

A sequence is a builder/generator for iterators. You use a sequence and describe
operations on a sequence. A sequence can then be asked to return an iterator
that do the actual work.

The idea is that you never use the iterators directly. You only use a sequence.
The iterator behind it is an implementation detail.

The advantage is that you have a high-level API with map, filter, fold and so
on. It combines all the functionality you see from map, grep, List::Util, ...

But it does it lazily instead of computing everything at once. Thus it can
provide immidiat results (when possible) and/or use less memory. Sometimes even
saving computation time. It can work with infinity sequences and really large
inputs.

Everything that is an iterator can potentially used with this API. This
includes file-handles, sockets, pipes and whatever you can think of.

Once you have defined a sequence. You can execute the sequence as often you
want on whatever data you give it. From its usage it looks like an
immutable iterator.

    # always represents the range from 1 to 100.
    my $range = Seq->range(1,100);

    # prints numbers 1 to 100
    $range->iter(sub($x) { say $x });

    # prints numbers 1 to 100 again ...
    $range->iter(sub($x) { say $x });

At the moment Documentation is lacking, but the source-code is well-documented
including the test-files. Maybe you want to look at the test-files until
I have written more documentation. The API is not fully stable at the moment.

    use v5.36;
    use Seq;

    # Fibonacci Generator
    my $fib =
        Seq->concat(
            Seq->wrap(1,1),
            Seq->unfold([1,1], sub($state) {
                my $next = $state->[0] + $state->[1];
                return $next, [$state->[1],$next];
            })
        );

    # prints: 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
    $fib->take(20)->iter(sub($x) {
        say $x;
    });

    # Represents all possible combinations
    # [[clubs => 7], [clubs => 8], [clubs => 9], ...]
    my $cards =
        Seq::cartesian(
            Seq->wrap(qw/clubs spades hearts diamond/),
            Seq->wrap(qw/7 8 9 10 B D K A/)
        );

    use Path::Tiny qw(path);
    # get the maximum id from test-files so far
    my $maximum_id =
        Seq
        # get all files from 't' folder
        ->wrap( path('t')->children )
        # get basename of each file
        ->map(  sub($x) { $x->basename })
        # extract all numbers from test files. returns matches as array
        ->regex_match( qr/\A(\d+) .* \.t\z/xms, [1])
        # get the first entry of each array (there is only one)
        ->fsts
        # get the maximum number, or -1 if sequence is empty
        ->max(-1);

=head1 CONCEPT

Functions are divided into CONSTRUCTORS, METHODS, CONVERTERS.

=head2 CONSTRUCTORS

All constructor functions are directly called from the C<Seq> module. Like
C<< Seq->init( ... ) >>. The return a C<Seq>.

=head2 METHODS

All methods can be called like a method on a C<Seq> or still be called in a
functional-style. Both styles are supported. In the documentation only the
functional style how it is defined in Perl is shown.

    $seq->length();
    Seq::length($seq);

=head2 CONVERTERS

Calling style is the same as METHODS. They are called CONVERTERS because they
usually return something different than a sequence again. For example
C<< $seq->map(...) >> returns a new sequence, but C<< $seq->max >> will
return a maximum value out of a sequence that can be potentially something
different than a sequence.

=head1 IMPORTING / EXPORTING / LOADING

This module is automatically loaded when you load C<Sq>. The module is
available under C<Seq>.

=head1 CALLING STYLE

Describe functional and chaining style here.

=head1 CONSTRUCTORS

This module uses functional-programming as the main paradigm. Functions are
divided into constructors, methods and converters.

Constructor create a sequence. Methods operate on sequences and return
another new sequence. Converter transforms a sequence to some other data-type.

Methods are called methods for convenience, but no object-orientation is
involved. Perls OO capabilities are only used as a chaning mechanism.

Constructors must be called with the Package name. Functions that operate
on Sequences can either be called as a method or directly from the Package.

    my $range =
        Seq
        ->wrap(1,2,3)
        ->append(Seq->wrap(4,5,6));

or

    my $range =
        Seq::append(
            Seq->wrap(1,2,3),
            Seq->wrap(4,5,6),
        )

=head2 Seq->empty() -> $seq

Returns an empty sequence. Useful as an initial state or as a starting point.

    my $seq = Seq->empty->append( $another_seq );

=head2 Seq->range($start, $stop) -> $seq

Returns a sequence from $start to $stop. Range can also be backwards. $start
and $stop are inclusive.

    my $seq = Seq->range(1, 5); # 1,2,3,4,5
    my $seq = Seq->range(5, 1); # 5,4,3,2,1
    my $seq = Seq->range(1, 1); # 1

=head2 Seq->range_step($start, $step, $stop) -> $seq

Like C<< Seq->range >> but let's you specify a step. Both values
are inclusive and also supports steps with floating-point. Consider
floating-point inaccurassy.

    my $seq = Seq->range(1,2,10)  # [1,3,5,7,9]
    my $seq = Seq->range(10,2,1)  # [10,8,6,4,2]
    my $seq = Seq->range(1,0.2,2) # [1,1.2,1.4,1.6,1.8,2]
    my $seq = Seq->range(1,0.2,2) # [2,1.8,1.6,1.4,1.2,1]

=head2 Seq->new(...) -> $seq

Just takes whatever you pass it to, and puts it in a sequence. This should be
your primarily way to create a sequence with values.

    my $seq = Seq->new(qw/Hello World/); # "Hello", "World"
    my $seq = Seq->new(1 .. 10);         # AVOID this, use Seq->range(1, 10) instead.
    my $seq = Seq->new(@array);

=head2 Seq->wrap(...) -> $seq

Same as C<< Seq->new >>.

    my $seq = Seq->wrap(qw/Hello World/); # "Hello", "World"
    my $seq = Seq->wrap(1 .. 10);         # AVOID this, use Seq->range(1, 10) instead.
    my $seq = Seq->wrap(@array);

=head2 Seq->concat(@sequences) -> $seq

Takes multiple *Sequences* and returns a single flattened sequence.

    # 0, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 0
    my $seq = Seq->concat(
        Seq->new(0),
        Seq->range(1, 5),
        Seq->range(5, 1),
        Seq->new(0),
    );

=head2 Seq->always($x) -> $seq

Returns an infinite sequence that always returns C<$x> as it's value.

    my $seq    = Seq->always(10);
    my $array1 = $seq->take(5)->to_array; # [10, 10, 10, 10, 10]
    my $array2 = $seq->take(3)->to_array; # [10, 10, 10]

=head2 Seq->replicate($count, $x) -> $seq

Creates a sequence representing C<$x> C<$count> times.

    # A sequence representing 100_000 times the value 1
    my $seq = Seq->replicate(100_000, 1);

=head2 Seq->unfold($state, $f) -> $seq

C<unfold> is like writing a loop to generate values. But instead that the
whole loop is completely run to an end it just runs the function C<$f>
with the current C<$state> to generate the next value in a sequence and which
next C<$state> should be used for the next call. It runs as long you try
to query data from it or the sequence indicates an end by returning C<undef>.

    my $seq = Seq->unfold(0, sub($x) {   # $x is 0 on first invocation
        return $x, $x+1;                 # return $x, and uses $x+1 as the next state.
    });

    my $first100 = $seq->take(100); # represents a sequence containing 0-99
    my $first500 = $seq->take(500); # represents a sequence containing 0-499

=head2 Seq->init($count, $f) -> $seq

Generates a maximum of C<$count> items and passes the current index to the function
C<$f> that performs the generation for that entry.

    my $seq = Seq->init(10, sub($idx) { $idx     }); # seq { 0 .. 9 }
    my $seq = Seq->init(10, sub($idx) { $idx * 2 }); # seq { 0,2,4,6,8,10,12,14,16,18 }

=head2 Seq->from_array($array) -> $seq

Generates a sequence from an array reference. This operation if very efficent
as the array is not copied. When you created an array (in a function) but want
to return it as a sequence this is the function you maybe wanna use. This way you also
can return an array as an immutable sequence, at least as long the original
array reference gets out of scope. Otherwise changing the original mutable
array will yield new/updated values.

    my $array = [1 .. 10];
    my $seq   = Seq->from_array($array);

    my $sumA = $seq->sum; # 55

    push @$array, 10;
    my $sumB = $seq->sum; # 65

=head2 Seq->from_hash($hash, $f) -> $seq

Turns a hash-ref into a sequence. When data is queried than every key,value pair
is passed to C<$f> that then can return a value that is used as the sequence
item. The hash-ref is not copied like in C<< Seq->from_array >>. This means
changing the hashref and quering the sequence again will get updated values.

    my $hash = {
        foo => 1,
        bar => 2,
        baz => 3,
    };

    my $keys   = Seq->from_hash($hash, sub($key,$value) { $key   });
    my $values = Seq->from_hash($hash, sub($key,$value) { $value });

    my $ka  = $keys->to_array; # ["foo", "bar", "baz"]
    my $sum = $values->sum;    # 6

    $hash->{maz} = 4;

    my $ka  = $keys->to_array; # ["foo", "bar", "baz", "maz"]
    my $sum = $values->sum;    # 10

=head2 Seq->from_sub($f) -> $seq

The foundation from that all sequences are created. You can turn any function
that returns a function into a sequence. The inner function must return C<undef>
to indicate the end of the sequence. As soon the inner function returns C<undef>
you can be sure that the inner function is never called again and memory should
be released.

For example an C<upto> function that just returns the value from 0 upto C<$x>
could be implemented this way.

    sub upto($x) {
        return Seq->from_sub(sub {
            # Here comes the Initial State of the iterator
            my $current = 0;

            return sub {
                if ( $current <= $x ) {
                    return $current++;
                }
                return undef;
            };
        });
    }

    # A sequence from 0-100
    my $seq = upto(100);

    # [0, 2, 4, 6, 8]
    my $first5even =
        $seq
        ->filter(sub($x) { $x % 2 == 0 })
        ->take(5)
        ->to_array;

=head2 MISSING DOC

Implemented, but not documented yet:

from_list

=head1 METHODS

Implemented, but not documented yet:

append, map, bind, flatten cartesian, join, merge, select*, choose, mapi,
filter, take, skip, indexed, distinct, distinct_by, iter, do, rev

* will maybe change

=head2 copy($seq) -> $seq

Copies a sequence, but because how sequence works it basically does nothing.
It is just here for API compatibility with other modules like Array::copy or
List::copy.

    my $same = $seq->copy;

=head2 append($seqA, $seqB) -> $seq

returns a new sequence where both sequences are appended into a single one.
When you want to append multiple sequences it is usually better to use C<< Seq->concat >>
instead.

    my $new    = $seq->append($other_seq);
    my $upto10 = Seq->range(1,5)->append( Seq->range(6,10) ); # seq { 1 .. 10 }

=head2 map($seq, $f) -> $seq

returns a new sequence where every value is mapped with the function C<$f>.

    my $seq = Seq->range(1,10);

    my $double  = $seq->map(sub($x) { $x * 2  }); # seq { 2,4,6,8,10,12,14,16,18,20 }
    my $squared = $seq->map(sub($x) { $x * $x }); # seq { 1,4,9,16,25,36,49,64,81,100 }

=head2 mapi($seq, $f) -> $seq

Similar to C<map> but the function C<$f> additionally receives the current
index of the item it processes.

    # seq { [5,0], [6,1], [7,2], [8,3], [9,4], [10,5] }
    my $seq =
        Seq
        ->range(5,10)
        ->mapi(sub($x,$idx) { [$x,$idx] });

=head2 filter($seq, $predicate) -> $seq

returns a new sequence with the elements filtered by C<$predicate>. A predicate
function is a function that returns a boolish value. When it returns a truish
value then the element is kept in the sequence. Similar zu perl built-in C<grep>
for an array.

    # contains only even numbers
    my $seq = $seq->filter(sub($x) { $x % 2 == 0 });

=head2 choose($seq, $chooser) -> $seq

Similar to C<map> as it executes C<$chooser> function on every element of the
sequence, but when C<$choose> returns C<undef> than the item is skipped in the
final sequence. This function allows to combine C<map> followed by C<filter>
in a single call.

    # seq { 2,4,6,8,10,12,14,16,18,20 }
    my $seq =
        Seq
        ->range(1,10)
        ->map(   sub($x) { $x * 2      })
        ->filter(sub($x) { $x % 2 == 0 });

    # seq { 2,4,6,8,10,12,14,16,18,20 }
    my $seq =
        Seq
        ->range(1,10)
        ->choose(sub($x){
            my $double = $x * 2;
            return $x % 2 == 0 ? $x : undef;
        });

=head2 bind($seq, $f) -> $seq

Similar to C<map> as every value of the sequence is passed to function C<$f>. But
C<$f> is supposed to return a new sequence again. Instead of returning a sequence
of sequence it just returns them as a flattened sequence.

    # seq { 0,1, 0,1,2, 0,1,2,3, 0,1,2,3,4, 0,1,2,3,4,5 }
    my $nums =
        Seq
        ->range(1,5)
        ->bind(sub($x) { Seq->range(0,$x) });

=head2 flatten($seq_of_seq) -> $seq

returns a new sequence that flattens a sequence of sequences into a single sequence.
You typically can get a sequence of sequence when you use C<map> with a function that
returns a sequence. Instead of calling C<flatten> on that result use C<bind> instead of C<map>.

    # seq { seq {1,2,3}, seq{4,5,6}, seq{7,8,9} }
    my $nums = Seq->new(
        Seq->range(1,3),
        Seq->range(4,6),
        Seq->range(7,9),
    );

    # seq { 1,2,3,4,5,6,7,8,9 }
    my $flatten = $nums->flatten;

=head2 flatten_array($seq_of_array) -> $seq

returns a new sequence that flattens a sequence of arrays into a single sequence.

    # seq { 1 .. 9 }
    my $nums = Seq->new([1,2,3], [4,5,6], [7,8,9])->flatten;

=head2 cartesian($seqA, $seqB) -> $seq_of_array

returns a new sequence containing the cartesian product of both sequences. The
cartesian product is every item in C<$seqA> combined with every item in C<$seqB>.

    # cartesian product of two arrays
    my @cartesian;
    for my $a ( @as ) {
        for my $b ( @bs ) {
            push @cartesian, [$a, $b];
        }
    }

    # cartesian product of two sequences
    $a->cartesian($b)->iter(sub($pair) {
        my ($a, $b) = @$pair;
        printf "A=%s B=%s\n", $a, $b;
    });

=head2 take($seq, $amount) -> $seq

returns a new sequence that only takes C<$amount> from its previous sequence.

    # seq { 1 .. 10 }
    my $seq = Seq->range(1,100)->take(10);

=head2 take_while($seq, $predicate) -> $seq

returns a new sequence and picks every element from the sequence as long
C<$predicate> returns a truish value.

    # seq { 20,10,3,70 }
    my $seq =
        Seq
        ->new(20,10,3,70,105,40,200)
        ->take_while(sub($x) { $x < 100 ? 1 : 0 });

=head2 skip($seq, $amount) -> $seq

returns a new sequence, but skips C<$amount> items.

    # seq { 4,5,6,7,8,9,10 }
    my $seq = Seq->range(1,10)->skip(3);

=head2 skip_while($seq, $predicate) -> $seq

returns a new sequence by skipping all values at the begging as long C<$predicate>
returns a truish value. After that, returns all values as-is.

    # seq { 70,105,40,200 }
    my $seq =
        Seq
        ->new(20,10,3,70,105,40,200)
        ->skip_while(sub($x) { $x < 50 ? 1 : 0 });

=head2 indexed($seq) -> $seq_of_array

returns a new sequence that puts the index and on element together. If you
just need to process an item with the index you should use C<mapi> or C<iteri>
instead.

    # seq { [0,10], [1,11], [2,12], [3,13], [4,14], [5,15] }
    my $seq = Seq->range(10,15)->indexed;

=head2 distinct($seq) -> $seq

returns a new sequence where every element will only appear once. Internally
a hash is used for seen elements. That means it only works properly when
elements can be converted to a string. Otherwise use C<distinct_by>.

    # seq { 1,2,3,4,5,6,7,10,8 }
    my $seq =
        Seq
        ->new(1,2,3,3,4,2,1,5,6,5,4,7,10,8)
        ->distinct;

=head2 distinct_by($seq, $f) -> $seq

Same as C<distinct> but uses function C<$f> to generate the key for an item
to be used as the seen key.

    my $data = Seq->new(
        {id => 1, name => "Foo"},
        {id => 2, name => "Bar"},
        {id => 3, name => "Baz"},
        {id => 1, name => "Foo"},
    );

    my $seq = $data->distinct_by(sub($x) { $x->{id} });
    # seq {
    #     {id => 1, name => "Foo"},
    #     {id => 2, name => "Bar"},
    #     {id => 3, name => "Baz"},
    # }

=head2 fsts($seq_of_array) -> $seq

returns a new sequence that only picks the first element of each array.

    # seq { "Hearth","Hearth","Spades" }
    my $strings =
        Seq->new(
            ["Hearth", 1],
            ["Hearth", 2],
            ["Spades", 3],
        )
        ->fsts;

=head2 fsts($seq_of_array) -> $seq

returns a new sequence that only picks the second element of each array.

    # seq { 1,2,3 }
    my $nums =
        Seq->new(
            ["Hearth", 1],
            ["Hearth", 2],
            ["Spades", 3],
        )
        ->snds;

=head2 zip($seqA, $seqB) -> $seq_of_array

Combines two sequences into a single sequence by always combining the next
element of both sequences. Stops as soon one sequence finish.

    # seq { ["foo",1], ["bar",1], ["baz",1] }
    my $mapping = Seq->zip(
        Seq->new(qw/foo bar baz/),
        Seq->always(1),
    );

=head2 rev($seq) -> $seq

returns a new sequence that reverses the sequence. Consider that reversing is
only possible when all elements of a sequence are iterated. Internally this
function builds a stack from a sequence and than pops every element until
done. Calling this method on a infinite sequence will probably hang/crash your
program/computer.

    # seq { 10,9,8,7,6,5,4,3,2,1 }
    my $seq = Seq->range(1,10)->rev;

=head2 sort($seq, $comparer) -> $seq

Sorts a sequence by using C<$comparer> function. Consider that sorting is only
possible when all elements of a sequence are known. Thus this method must build
an array from all elements of a sequence and than sorts it.

    # seq { 1,2,5,8,10,20,30 }
    my $sorted_nums =
        Seq
        ->new(1,30,5,2,8,10,20)
        ->sort(sub($x,$y) { $x <=> $y });

=head2 sort_by($seq, $comparer, $get_key) -> $seq

Does a Schwartzian Transformation by first passing every element to the function
C<$get_key> that returns the key used in sorting. Than uses C<$comparer> to sort
by the generated keys. Returns the original entries sorted by its keys.

    # seq { "a","as","hello","between" }
    my $seq =
        Seq
        ->new("hello", "a", "between", "as")
        ->sort_by(
            sub($x,$y){ $x <=> $y },  # comparer, sort by number
            sub($x)   { length $x },  # get_key that uses string length
        );

=head2 group_fold

TODO

=head2 group_by

TODO

=head2 cache($seq) -> $seq

runs a sequence at this point and builts an array. Then returns a new sequence
from that array. This can be good when you have a long chain of transformations
and at certain points you want to compute the values instead of recomputing
it again and again. It's also a good candidate when the sequence operates on
mutable data. Calling C<cache> still only makes sense when you want to use
the final sequence and do additional operations on it. Otherwise you just can
call C<to_array>.

    my $evens =
        Seq
        ->range(1,10_000)
        ->filter(sub($x) { $x % 2 == 0 })
        ->cache;

    # $evens is only computed once, but also uses more memory.
    my $doubled = $evens->map(sub($x) { $x * 2  });
    my $squared = $evens->map(sub($x) { $x * $x });

=head2 regex_match($seq_of_strings, $regex, $array_picks) -> $seq

Matches a C<$regex> against every element of a sequence. C<$array_picks>
contains the $1, $2, $3, ... numbers that should be extracted from the regex.

TODO EXAMPLE

=head2 windowed($seq, $window_size) -> $seq_of_array

TODO

=head2 intersperse($seq, $separator) -> $seq

returns a new sequence with C<$sepator> injected between every element.

    # seq { 1,'+',2,'+',3,'+',4,'+',5 }
    my $seq = Seq->range(1,5)->intersperse('+');

=head2 infinity($seq) -> $seq

Repreats a sequence up to infinity.

    # seq { 1,2,3,1,2,3,1,2,3,1,2,3,1, ... }
    my $seq = Seq->range(1,3)->infinity;

=head2 repeat($seq, $cont) -> $seq

Repeats a whole sequence a given amount.

    # seq { 1,2,3, 1,2,3, 1,2,3 }
    my $seq = Seq->range(1,3)->repeat(3);

=head1 CONVERTERS

Implemented, but not documented yet:

fold, reduce, first, last, to_list, count, sum, sum_by, min,
min_by, min_by_str, max, max_str, max_by, max_by_str, str_join, to_hash,
group_by, find

=head2 to_array($seq, $count=undef) -> Array

Converts the whole sequence into an array. This causes the sequence to compute
things. Optionally you can pass in a C<$count> of how many max items you want to
take from the sequence. When no C<$count> or C<undef> or not a number is passed,
then all items from the sequence are taken.

When you just want to iterate through all items, instead of calling C<to_array>
and then iterate through that array just use C<iter> instead.

    # those are the same
    $seq->take(10)->to_array == $seq->to_array(10);

    my $array = $seq->to_array;
    my $array = $seq->to_array(10);

=head2 first($seq, $default)

Returns first element of seq or C<$default> if sequence is empty.

    my $first = $seq->first(0);

    my $one   = Seq->range(1,10)->first(0);
    my $zero  = Seq->empty      ->first(0);

=head2 last($seq, $default)

Returns last element of seq or C<$default> if sequence is empty.

    my $last = $seq->first(0);

    my $ten   = Seq->range(1,10)->last(0);
    my $zero  = Seq->empty      ->last(0);

=head2 as_hash($seq) -> $hash

Turns a sequence into a Sq Hash by expecting that the sequence contains key/value
pairs. Similar as writing C<< my %hash = @list >> in Perl.

    # { foo => 1, bar => 2 }
    my $hash = Seq->new(qw/foo 1 bar 2/)->as_hash;

=head2 to_hash($seq, $mapper) -> $hash

Calls C<$mapper> function for every element in the sequence. Expects that
C<$mapper> returns the key and value used to build the final Hash.

    # {"Hello" => 5, "World" => 5, "One" => 3, "Two" => 3}
    my $hash = Seq->new(qw/Hello World One Two/)->to_hash(sub($key) {
        $key => length $key
    });

=head2 expand($seq)

Similar to C<to_array> as that it starts to turn a sequence into an array. But
instead of returning it as a blessed Sq Array it returns it as a Perl List
in List Context.

Only use this function if you need to pass a list of values to some other function,
if you just want to iterate every element use C<iter>, C<iteri> instead. Prefer
C<to_array> over C<expand>. When you want to turn a Sequence into a Hash, use
C<as_hash> or C<to_hash> instead.

    my @array = $seq->expand;
    my $array = $seq->to_array();

    for my $x ( $seq->expand ) {
        ...
    }

    # Better
    $seq->iter(sub($x) {
        ...
    });

=head2 fold($seq, $state, $folder) -> Any

fold is like a foreach-loop. You iterate through all items generating a new B<State>.
The C<$folder> is passed the latest B<State> and one element from the sequence. You
return the next B<State> that should be used. Once all elements of the sequence are
processed the latest B<State> is returned.

    my $seq = Seq->range(1,1000);
    my $sum = $seq->fold(0, sub($state, $x) {
        $state + $x
    });

Above you can see that C<0> is passed as the starting B<State>. On the first iteration
the subroutine gets C<0> as C<$state> passed and C<1> as the first element of the
sequence. It calculates C<0 + 1> and returns C<1> as the next B<State>.

Then for the next iteration C<1> for C<$state> is used and C<2> as C<$x>. It returns
C<1 + 2> as the next C<$state> and continues until all elements of the sequence
are iterated. The last calculated C<$state> is returned as the final result of
C<fold>.

You can compare it to a foreach-loop because what you define as C<$state> is usually
what you would define outside of a loop. Consider the following example with an
Array as comparison to understand what C<fold> does.

    my @seq = (1 .. 1000);
    my $state = 0;
    for my $x ( @seq ) {
        $state = $state + $x;
    }
    return $state;

=head2 fold_mut($seq, $state, $folder) -> Any

C<fold_mut> is an optimization of C<fold>. C<fold> works by computing a new C<$state>
on every call. Every time the C<$folder> function is executed the result of this
call is assigned to C<$state>. In a fully immutable programming environment
this is usually fine and the only way to create immutable-data.

Perl on the other hand is not an immutable language, don't provide immutable
data-types by default and because of the lack like a JIT or a compiler with
a dozens of compiler optimizations is in general slower. Because of that it
is sometimes helpful to operate on mutable data as an optimization.

C<fold_mut> works the same as C<fold>, but it expects that C<$state> is mutated
during every iteration. After all operations are finished, C<$state> is still
returned.

    # this transforms a sequence into an array
    my $array = Seq->range(1,1000)->fold_mut([], sub($array, $x) {
        push @$array, $x;
        return;
        # the explicit return is not needed.It just shows that the return
        # value of this lambda is not used.
    });

=head2 reduce($seq, $default, $reducer) -> Any

In a dynamic-typed language like Perl it is basically the same as C<fold>. The
only difference is that no C<$state> is explicitly passed and it just begins
calling C<$reducer> with the first two elements of the sequence.

When the sequence only has one element than this element is immediately returned
without that C<$reducer> is ever called. It is compareable when you have an
empty sequence and use C<fold>, then C<$state> is immediately returned.

But what should be returned when the sequence is empty? Because of this C<reduce>
expects an argument C<$default>. Other possibilites would be to throw an exception,
return an option or something else.

I highly encourage to better use C<fold> or C<fold_mut> instead of C<reduce>.

    my $sum = Seq->range(1,1000)->reduce(0, sub($x,$y)     { $x + $y     });
    my $sum = Seq->range(1,1000)->fold(  0, sub($state,$x) { $state + $x });

=head1 SIDE-EFFECTS

=head2 iter($seq, $f)

Iterates through all elements of a sequence and calling C<$f> for every element.
As C<iter> returns nothing it is just used for doing side-effects. Or maybe
when you want to iterate through a sequence and build other data. But consider
using C<fold> or C<fold_mut> instead. Or any other of the B<CONVERTER> methods.

    Seq->range(1,1000)->iter(sub($x) {
        say $x;
    });

=head2 foreach($seq, $f)

Same as C<iter>.

    Seq->range(1,1000)->foreach(sub($x) {
        say $x;
    });

=head2 iteri($seq, $f)

Same as C<iter> but C<$f> additionally gets an index passed.

    Seq->range(10,15)->iteri(sub($x,$idx) {
        printf "%d: %d\n", $idx, $x;
    });

    # prints
    # 0: 10
    # 1: 11
    # 2: 12
    # 3: 13
    # 4: 14
    # 5: 15

=head2 foreachi($seq, $f)

Same as C<iteri>.

    Seq->range(10,15)->foreachi(sub($x,$idx) {
        printf "%d: %d\n", $idx, $x;
    });

    # prints
    # 0: 10
    # 1: 11
    # 2: 12
    # 3: 13
    # 4: 14
    # 5: 15

=head2 do($seq, $f) -> $seq

A functions like C<iter> starts to iterate all elements of a sequence. C<do> does
not. It just allows that a function is called before each element is returned.
This is usually useful in debugging. You can easily intercept anywhere between
in a sequence.

    # [4,16,36,64,100]
    my $array =
        Seq
        ->range(1, 1000)
        ->filter(sub($x) { $x % 2 == 0       })
        ->do(    sub($x) { printf "%d\n", $x })
        ->map(   sub($x) { $x * $x           })
        ->to_array(5);

The above code first filters out even numbers, then calculates the square of
each number. It only returns the first 5 numbers as an array. But besides doing
that, this code will print.

    2
    4
    6
    8
    10

C<do> only executes for those elements you ask for. If you don't force evaluation
somehow through any B<CONVERTER> method, then nothing will happen. Use C<iter>
when you want to force evaluation.

=head2 doi($seq, $f) -> $seq

Same as C<do> but additionally passes an B<index> to the function C<$f>.

    # [4,16,36,64,100]
    my $array =
        Seq
        ->range(1, 1000)
        ->filter(sub($x)      { $x % 2 == 0                 })
        ->doi(   sub($x,$idx) { printf "$d: %d\n", $idx, $x })
        ->map(   sub($x)      { $x * $x                     })
        ->to_array(5);

Besides returning the array, the code will also print.

    0: 2
    1: 4
    2: 6
    3: 8
    4: 10

=head1 Github

Development project is on Github. L<https://github.com/DavidRaab/Seq>

=head1 AUTHOR

David Raab, C<< <davidraab83 at gmail.com> >>

=head1 LICENSE AND COPYRIGHT

This software is Copyright (c) 2023 by David Raab.

This is free software, licensed under:

  The MIT (X11) License
