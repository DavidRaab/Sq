# PODNAME: Sq::Collections::Array
# ABSTRACT: Array functions

__END__

=pod

=encoding UTF-8

=head1 NAME

Sq::Collection::Array - Array functions

=head1 DESCRIPTION

An Sq Array is just a Perl array blessed into the Array package. You
could create it yourself by just typing.

    return $array = bless([], 'Array');

Nothing is added to the reference or nothing special besides that is done
and will never be done. This design is choosen for several reasons.

=over 4

=item *

You always can use and threat an array created by this package like a normal
Perl Array. Doing this is completely fine.

    my $array = Array->new(1,2,3,4,5);
    for my $x ( @$array ) {
        ...
    }

    push @$array, 6, 7, 8;

=item *

An Sq Array always should and can be used wherever an Array reference is
expected. This works as long a module does not any kind of pseudo type-checking
and just uses it as an array.

=item *

No re-implementation of an Array, as it not needed. Would be probably to slow
and a burden to work with in Perl.

=item *

This way it just extends the possibility that you can call a lot of functions
in this package as methods on an array.

=back

=head1 CONSTRUCTORS

Constructor functions are package functions that helps in the creation of
new Arrays. All Constructor function must be called with an arrow C<->>
as you expect it from typical OO code. Like C<< Array->new(...) >> or
C<< Array->init(...) >>.

=head2 Array->new($x,$y,$z,...)

Creates an Array with the specified values to C<new>. There is a special
behaviour that aborts on an C<undef>. This is to be align with the L<Sq::Collections::Seq>
data-structure that uses C<undef> to abort a sequence. But you anyway
don't want to have C<undef> as values in an array.

    my $numbers = Array->new(1,2,3,4,5);        // [1..5]
    my $numbers = Array->new(1,2,3,undef,4,5,6) // [1,2,3]

=head2 Array->wrap($x,$y,$z,...)

Same as C<new>. Used this naming because of the I<Monad Abstraction>. Maybe
get deleted.

=head2 Array->empty

Returns an empty fresh Array.

    my $empty = Array->empty;

=head2 Array->bless($aref)

Adds the I<Array> blessing to the array reference and returns it. Can be used
in two ways.

    my $someArray = [1,2,3];
    Array->bless($someArray);

    my $someArray = Array->bless([1,2,3]);

=head2 Array->from_array($aref)

Same as C<< Array->bless >>

=head2 Array->replicate($count, $value)

Creates a new I<Array> that contains C<$value> C<$count> times.

    my $xs = Array->replicate(5,"x"); // [qw/x x x x x/]

=head2 Array->range($start, $stop)

Generates a new array from C<$start> to C<$stop> inclusive. It also supports
counting downwards.

    my $array = Array->range(1,10); // [1..10]
    my $array = Array->range(10,1); // [10,9,8,7,6,5,4,3,2,1]

=head2 Array->range_step($start, $step, $stop)

Like C<< Array->range >> but let's you specify a step. Both values
are inclusive and also supports steps with floating-point. Consider
floating-point inaccurassy.

    my $array = Array->range(1,2,10)  // [1,3,5,7,9]
    my $array = Array->range(10,2,1)  // [10,8,6,4,2]
    my $array = Array->range(1,0.2,2) // [1,1.2,1.4,1.6,1.8,2]
    my $array = Array->range(1,0.2,2) // [2,1.8,1.6,1.4,1.2,1]

=head2 Array->concat(@arrays)

Returns a new array with all arrays concatenated into a new one.

    // [1,2,3,4,5,6,7,10,10,10]
    my $array = Array->concat(
        [1,2,3,4],
        Array->new(5,6,7),
        Array->replicate(3, 10),
    )

    // same as
    my $array = Array->range(1,7)->append([10,10,10]);

=head2 Array->init($count, $f)

Generates a new C<Array> with C<$count> entries. An entry generating function
C<$f> is called by passing it the current index.

    my $array = Array->init(5, sub($idx) { $idx });         // [0,1,2,3,4]
    my $array = Array->init(5, sub($idx) { "1" x $idx });   // ["","1","11","111","1111"]
    my $array = Array->init(3, sub($idx) { +{$idx => 1} }); // [{0 => 1},{1 => 1},{2 => 1}]

=head2 Array->unfold($state, $f)

C<<< 'State -> ('State -> ('a * 'State)) -> Array<'a> >>>

Generates a new Array by passing the function C<$f> the C<$state>. C<$f>
then must return a value to be used in an array and the next state for the
next call to C<$f>. This keeps on as long C<$f> returns a defined value.

    // [1..99]
    my $array = Array->unfold(1, sub($state) {
        if ( $state < 100 ) {
            return $state, $state+1;
        }
        else {
            return;
        }
    });

The above generates an array containing the numbers from B<1> to B<99>. It works
the following.

=over

=item *

The anonymous function is called with the starting C<$state> that was set to C<1>.

=item *

The anonymous function returns C<$state> as an element to be used in the array.
In the first call this will be C<1>. The next state for the next call to the
anonymous function is set to C<$state + 1>.

=item *

The anonymous function is called with C<2> as this was the next state that
should be used.

=item *

This process keeps going on until at some point C<$state> reaches the value
C<100>. At this C<$state> the anonymous function returns nothing and the generation
of the array is aborted.

=back

C<unfold> is a very powerful function. Theoretically all constructor functions
can be implemented by C<unfold>. Everytime you use some kind of loop to generate
a new array, you can potentially replace it by an C<unfold>. This is the
functional way to generate data without relying on mutation of any variables.

    // [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987]
    my $array =
        Array->concat(
            [1,1],
            Array->unfold([1,1], sub($state) {
                # $state starts with [1,1]
                my ($x,$y)   = @$state;
                my $next_fib = $x + $y;

                if ( $next_fib < 1000 ) {
                    return $next_fib, [$y,$next_fib];
                }
                return;
            })
        );

this code roughly translates to

    my $array = [1,1];
    my $state = [1,1];

    while (1) {
        my ($x,$y)   = @$state;
        my $next_fib = $x + $y;

        if ( $next_fib < 1000 ) {
            push @$array, $next_fib;
            $state = [$y,$next_fib];
            next;
        }

        last;
    }

=head1 METHODS

All methods can be called as a method on an C<Array> (hence the name method),
but calling every method in a functional-style is also supported and not
discouraged. Every method listed here returns a new array as a result and
does no mutation.

As a Perl developer you should know that calling

    $array->method($x, $y);

is the same as

    Array::method($array, $x, $y);

usually calling it in the second form is discouraged because it doesn't work
properly with inheritance. But inheritance is anyway not supported by this
module and instead inheritance is highly discouraged. You do something horrible
wrong if for whatever reason you want to have inheritance.

Calling it in the functional interface form also has another benefit that it also
works with unblessed array references. This module was written from the ground
up to support both styles and also to work with any unblessed array reference.

By default you obviously cannot write.

    [1..10]->append([11..20])

because C<[1..10]> is just a perl array reference and has no blessing added
to the C<Array> module. You either must create C<[1..10]> with some constructor
methods like C<< Array->new(1..10) >> or C<< Array->range(1,10) >> or add the
blessing with C<< Array->bless >> or you just use the functional interface.

    // All arrays represent an array [1..20]
    my $array = Array::append([1..10], [11..20])
    my $array = Array->range(1,10)->append([11..20])
    my $array = Array->range(1,10)->append(Array->range(11,20))
    my $array = Array->new(1..10)->append([11..20])

But whatever you do. All methods will always return a blessed C<Array>
reference. So you always can chain methods even if you started without any.

    my $array = Array::append([1..10], [11..20])->rev // Array->range(20,1)

=head2 $new = $array->append($array2)

returns a $new array that has $array2 appended onto $array. C<append> only
works with two arrays (one argument in method-style). If you want to
append multiple arrays together use C<< Array->concat >> instead.

    my $array = Array->range(1,3)->append([4,5,6])->append([7,8,9]) // [1..9]

    my $array = Array->concat(
        [1..3],
        [4,5,6],
        [7,8,9],
    );

=head2 rev

=head2 bind

=head2 flatten

=head2 map

=head2 mapi

=head2 choose

=head2 filter

=head2 skip

=head2 take

=head2 count

=head2 fold

=head2 fold_mut

=head2 indexed

=head2 zip

=head2 sort

=head2 sort_by

=head2 sort_num

=head2 sort_str

=head2 sort_hash_str

=head2 sort_hash_num

=head2 fsts

=head2 snds

=head2 to_array_of_array

=head2 distinct

=head2 distinct_by

=head2 regex_match

=head2 windowed

=head2 intersperse

=head2 repeat

=head2 take_while

=head2 skip_while

=head1 CONVERTER

Converter are methods on an array that don't return C<Array>.

=head2 expand

=head2 first

=head2 last

=head2 reduce

=head2 sum

=head2 sum_by

=head2 str_join

=head2 group_fold

=head2 to_hash

=head2 to_hash_of_array

=head2 keyed_by

=head2 group_by

=head2 as_hash

=head2 find

=head2 any

=head2 all

=head2 none

=head2 pick

=head1 MUTATION

The following methods mutate the array instead of creating a new one as
a result

=head2 push

=head2 pop

=head2 shift

=head2 unshift

=head1 SIDE-Effects

The following methods have no return value and exists for various kind
of doing side-effects.

=head2 iter

=head2 iteri

=head2 foreach

=head2 foreachi

