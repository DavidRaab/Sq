# PODNAME: Sq::Core::Option
# ABSTRACT: Option functions

__END__

=pod

=encoding UTF-8

=head1 NAME

Sq::Core::Option - Option functions

This module is automatically loaded and accessible under C<Option> by loading C<Sq>.

=head1 DESCRIPTION

An Option is an alternative to represent undef/null values. By default every
value in Perl can be C<undef>. The problem with working with C<undef> is that
you need to check them but are never forced todo so. If you forget to check
for C<undef> than typical warnings in Perl will appear or maybe even the program
crashes when you try to call a method on an C<undef> value.

An option is a way to make it explicitly visible that a function sometimes returns
no value at all. A user of the option value must explicitly work with an option
and unpack the value or use some of the methods provided by the option module
instead of directly extracting the value. When a value is extracted the user
must write code for both cases that reduces the amount of errorness code that
is possible to write.

But the whole idea on top of that is that there are special functions written
that helps working and doing typical task with optional values.

Like the other modules you always can call every method in a functional-style.

By loading C<Sq> it automatically imports the function C<Some> and C<None>
to create optional values.

    my $x = Some(10);
    my $y = Some(0);
    my $z = None;

=head1 CONSTRUCTORS

These function creates optional values.

=head2 Some($x) : $opt_x

The C<Some> function is automatically imported by loading C<Sq>. Every value
except C<undef> turns into a valid value.

    my $opt = Some(10);
    my $opt = Some([]);
    my $opt = Some({ a => 1, b => 2});
    my $opt = Some(undef);             # None

=head2 None() : $opt

This indicates the absence of a value

    my $opt = None();
    my $opt = None;

=head1 METHODS

Methods work on an optional value. All Methods can also be called in a
functional-style. This means you always can do both calling styles.

    $opt->map(sub($x) { ... });
    Option::map($opt, sub($x) { ... });

=head2 is_some($any) : $bool

returns a truish value when the optional contains some value. Most of the
time you probably want to use an extraction method instead.

    if ( $opt->is_some ) {
        ...
    }

Calling this method in a functional-style has the benefit that it also does
a proper type-checking of an optional, you can pass any value to it and get
back if the value is an optional and if it is B<Some> value.

    my $bool = Option::is_some($any)

    my $bool = Option::is_some(Some({}));    # 1
    my $bool = Option::is_some(Some(1));     # 1
    my $bool = Option::is_some(None);        # 0
    my $bool = Option::is_some(Some(undef)); # 0
    my $bool = Option::is_some("");          # 0
    my $bool = Option::is_some(0);           # 0
    my $bool = Option::is_some([]);          # 0
    my $bool = Option::is_some({});          # 0

=head2 is_none($any) : $bool

returns a truish value when the optional is None. Most of the time you probably
want to use an extraction method instead.

    if ( $opt->is_none ) {
        ...
    }

Calling this method in a functional-style has the benefit that it also does
a proper type-checking of an optional, you can pass any value to it and get
back if the value is an optional and if it is a B<None> value.

    my $bool = Option::is_none(Some({}));    # 0
    my $bool = Option::is_none(Some(1));     # 0
    my $bool = Option::is_none(None);        # 1
    my $bool = Option::is_none(Some(undef)); # 1
    my $bool = Option::is_none("");          # 0
    my $bool = Option::is_none(0);           # 0
    my $bool = Option::is_none([]);          # 0
    my $bool = Option::is_none({});          # 0

Consider that other values than B<Some> or B<None> also return C<0> because
an empty string for example is not an optional.

=head2 match($opt, Some => sub($value){ ... }, None => sub(){ ... })

Pattern matches against the optional value. It either runs the function provided
with the C<Some> argument or the C<None> argument. It's usually used to extract
the value by providing two functions for each case the optional can be in. If
you just want to extract the value or use a default value then use the method
C<or> instead.

    my $number =
        $opt->match(
            Some => sub($x) { $x + 1 },
            None => sub     { 0      },
        );

    # will be 11
    my $number =
        Some(10)->match(
            Some => sub($x) { $x + 1 },
            None => sub     { 0      },
        );

    # will be 0
    my $number =
        None->match(
            Some => sub($x) { $x + 1 },
            None => sub     { 0      },
        );

=head2 or($optional, $value)

Returns the value when it is C<Some> value or the C<$default> value passed to it
when it is C<None>.

    my $a = $opt    ->or(10);
    my $b = Some(10)->or(0);      # 10
    my $c = None    ->or(0);      #  0
    my $d = Option::or($opt, 10);

=head2 or_else($optional, $defaultOptional)

Similar to C<or> but returns C<$optional> as-is as long it is C<Some> value.
Otherwise returns C<$defaultOptional> that is expected to be an optional.

    my $opt = $opt   ->or_else(Some("foo"));
    my $opt = Some(1)->or_else(Some 2);      # Some 1
    my $opt = None   ->or_else(Some 3);      # Some 3

=head2 or_with($optional, $f)

Same as C<or> but instead of passing a value that is used in the None case, a
function is expected and executed. This is useful in two cases.

=over 4

=item

When the or case should create different mutable values. Also when those values
only should be lazily created only when the value is C<None>. Consider that when
using C<or> you always already create a value before the C<or> function is run.
For just "normal" values like strings or numbers this might be okay. But when the
C<$default> value might execute some kind of side-effect or has some expensive
cost attached to it, you highly want to use C<or_with>.

=item

When you want to execute a piece of code containing some kind of side-effects
that only should be executed when the value was C<None>.

=back

    # always returns a new array-ref
    my $x = $opt->or_with(sub { [] });

    # returns current time in the case of None
    my $x = $opt->or_with(sub { scalar localtime });

=head2 or_else_with($optional, $fopt)

When C<$optional> is C<Some> value returns C<$optional> as-is. Otherwise executes
and returns the result of C<< $fopt->() >> that should generate an optional value.

    my $opt = Some([1])->or_else_with(sub { Some [] }) # Some [1]
    my $opt = None     ->or_else_with(sub { Some [] }) # Some []

=head2 map($optional, $f)

When you have a function that don't know about optionals then you use C<map>
to let the function run of its value. When the optional is C<None> then
the function will not be executed, otherwise the function is executed
with the value that the optional holds. Always returns an optional.

C<map> is good for functions with the signature C<< 'a -> 'b >>

    # Here $incr is a function expecting a number and returning a number
    # no optional is involved. It's basically of type: number -> number
    my $incr = sub($x) { $x + 1 };

    my $opt = $opt    ->map($incr);
    my $opt = Some(0) ->map($incr); # Some(1)
    my $opt = Some(10)->map($incr); # Some(11)
    my $opt = None    ->map($incr); # None

=head2 map2($optA, $optB, $f)

Whenever you have a function expecting two normal values, but you have two
optional values, you use this function. Returns an optional value again.

    my $add = sub($x,$y) { $x + $y }

    # adds together both optional values or returns None if one of them is None
    my $opt = Option::map2($optA, $optB, $add);
    my $opt = $optA->map2($optB, $add);

    my $opt = Some(10)->map2(Some(3), $add); # Some(13)
    my $opt = None    ->map2(Some(3), $add); # None

=head2 map3($optA, $optB, $optC, $f)

Same as C<map2> but for three optional values.

    # adds all three optional together as long all of them are Some value
    # otherwise $x will be None.
    my $opt =
        Option::map3($optA, $optB, $optC, sub($a, $b, $c) {
            return $a + $b + $c;
        });

=head2 map4($optA, $optB, $optC, $optD, $f)

Same as C<map3> but for four optional values.

    # adds all four optional together as long all of them are Some value
    # otherwise $x will be None.
    my $opt =
        Option::map4($optA, $optB, $optC, $optD, sub($a, $b, $c, $d) {
            return $a + $b + $c + $d;
        });

=head2 map_v(@opts, $f)

Expects a variable amount of optional values and a function as the last argument.
Executes the function with all unpacked values when all optionals are C<Some> values.
Otherwise returns C<None>.

Theoretically C<map_v> can replace all other C<mapX> functions, but consider that
this function is usually slower because of its implementation compared to
directly calling C<map>, C<map2>, C<map3> or C<map4>.

    # Some(28)
    Option::map_v(Some 1, Some 2, Some 3, Some 4, Some 5, Some 6, Some 7, sub {
        my $sum = 0;
        for my $x ( @_ ) {
            $sum += $x;
        }
        return $sum;
    });

=head2 bind($optional, $f)

C<bind> is also sometimes called C<chain> or C<then> (depending on language
or module). It allows chaining together functions that expects a non optional
value, but returns an optional value. It is good for functions with the
signature C<<< 'a -> Option<'b> >>>

    # this function parses a string and returns an optional. Either Some integer
    # when the functions succeeds or None if not.
    # Type: string -> Option<int>
    my $parse_int = sub($str) {
        if ( $str =~ m/\A \s* (\d+) \s* \z/xms ) {
            return Some($1);
        }
        return None;
    };

    # The result will be Option<int>. Some(int) or None.
    my $opt = $opt->bind($parse_int);

    my $opt = Some("10")->bind($parse_int); # Some(10)
    my $opt = Some("ab")->bind($parse_int); # None
    my $opt = None      ->bind($parse_int); # None

    # compare it when you have used map instead of bind
    my $opt = Some("10")->map($parse_int);  # Some(Some(10))
    my $opt = Some("ab")->map($parse_int);  # Some(None)
    my $opt = None      ->map($parse_int);  # None

    # calling ->map($f)->flatten() will return the same result as using bind()

=head2 bind2($optA, $optB, $f)

When you have two optional values to unpack and want them to pass it to
a function that produces a new optional value.

    # adds $optA and $optB together when both values are C<Some> value and
    # greater than 0. returns Some sum or None.
    my $opt_sum =
        Option::bind2($optA, $optB, sub($a, $b) {
            if ( $a > 0 && $b > 0 ) {
                return Some($a + $b);
            }
            return None;
        });

    my $opt_sum =
        $optA->bind2($optB, sub($a, $b) {
            if ( $a > 0 && $b > 0 ) {
                return Some($a + $b);
            }
            return None;
        });

=head3 bind3($optA, $optB, $optC, $f)

Unpacks three optional values and when all three are C<Some> values passes
them to C<$f> that returns an optional value.

    my $opt_sum =
        Option::bind3($optA, $optB, $optC, sub($a,$b,$c) {
            if ( $a > 0 && $b > 0 && $c > 0 ) {
                return Some($a + $b + $c);
            }
            return None;
        });

=head3 bind4($optA, $optB, $optC, $optD, $f)

Unpacks four optional values and when all three are C<Some> values passes
them to C<$f> that returns an optional value.

    my $opt_sum =
        Option::bind4($optA, $optB, $optC, $optD, sub($a,$b,$c,$d) {
            if ( $a > 0 && $b > 0 && $c > 0 && $d > 0 ) {
                return Some($a + $b + $c + $d);
            }
            return None;
        });

=head2 bind_v(@opts, $f)

Unpacks all optionals and when all values are C<Some> value then passes all
values to function C<$f> that returns an Optional value again.

    my $sum_under_100 = sub {
        my $sum = 0;
        for my $x ( @_ ) {
            $sum += $x;
        }
        return $sum <= 100
             ? Some($sum)
             : None;
    };

    Option::bind_v(Some 1, Some 2, Some 3, Some 4, Some 5, Some 6, $sum_under_100); # Some(21)
    Option::bind_v(Some 30, Some 50, Some 40,                      $sum_under_100); # None

=head2 validate($optional, $predicate)

Runs a predicate function (a function returning a boolish value) on the value.
When C<$optional> is Some value and the C<$predicate> function returns a truish
value then C<$optional> will not change. Otherwise returns C<None> instead.

    my $is_normalized = sub($x) {
        return $x >= 0 && $x <= 1.0 ? 1 : 0;
    };

    my $opt = Some(0)  ->validate($is_normalized) # Some(0)
    my $opt = Some(0.2)->validate($is_normalized) # Some(0.2)
    my $opt = Some(2)  ->validate($is_normalized) # None
    my $opt = None     ->validate($is_normalized) # None

=head2 check($optional, $predicate)

Similar to C<validate>. But instead of returning an optional that contains
the information if value was valid or not it directly returns the boolean
value. A C<None> value always return a falsish value.

    my $bool = Some(0)      ->check(\&is_num) # 1
    my $bool = Some(1)      ->check(\&is_num) # 1
    my $bool = Some("0E0")  ->check(\&is_num) # 1
    my $bool = Some(" 100") ->check(\&is_num) # 1
    my $bool = Some("0.00") ->check(\&is_num) # 1
    my $bool = Some("+0.00")->check(\&is_num) # 1
    my $bool = Some("f100") ->check(\&is_num) # 0
    my $bool = Some(undef)  ->check(\&is_num) # 0
    my $bool = Some("")     ->check(\&is_num) # 0
    my $bool = None         ->check(\&is_num) # 0

=head2 flatten($optional)

Whenever you have multiple nested optionals you just call C<flatten> and it
flattens its down to just a single optional value. One reason why you could
end up with multiple nested optionals is when you use C<map> instead of C<bind>.

    my $opt = None                      ->flatten # None
    my $opt = Some(10)                  ->flatten # Some(10)
    my $opt = Some(Some(10))            ->flatten # Some(10)
    my $opt = Some(Some(Some(Some(10))))->flatten # Some(10)
    my $opt = Some(Some(Some(None)))    ->flatten # None

=head2 fold($opt, $state, $f_state) : $state

When you have a function expecting two normal values, but one value is an
optional, then this function is probably what you wanna use. It either returns
C<$state> when the optional is None. Otherwise it executes C<$f_state> by passing
it the value of the C<$opt> and the C<$state>.

This function either returns C<$state> or whatever C<$f_state> returns. The type
of C<$state> and whatever C<$f_state> returns should be the same, oterwise this
function hardly makes any sense.

    my $add = sub($x, $state) { $x + $state };

    my $x = $opt    ->fold(100, $add);
    my $x = Some(10)->fold(100, $add); # $add->(10,100) -> 110
    my $x = None    ->fold(100, $add); # $state         -> 100

=head2 iter($optional, $f)

Runs function C<$f> when there is C<Some> value otherwise does nothing when
the value is C<None>. Usually this is done for side-effects as the funtion
returns nothing.

    Some("Hello")->iter(sub($str) { say $str }); # prints: "hello"
    None         ->iter(sub($str) { say $str }); # prints nothing

=head2 to_array($optional)

Converts the optional into an array. In the case of Some value it turns into
an array of length 1 containing the value, otherwise it is an empty array.
Arrays are blessed into the Sq Array.

    my $array = $opt->to_array();
    my $array = Some(1)->to_array; # [1]
    my $array = None   ->to_array; # []

=head2 get($optional)

Returns the value inside of an optional, but only when the value is Some value,
otherwise throws an exception. This function should be avoided as much as
possible if you want a working program. At least you should use C<is_some>
before extracting, or even better either use C<match>, C<or> or C<or_with>
to extract the value.

    my $x = Some(10)->get; # 10
    my $x = None    ->get; # throws exception

=head1 MODULE FUNCTIONS

The functions here are concipated to be called from the module level because
they don't make sense to be called as a method. Usually because the first argument
is not just an option. Here we have a list of options. But they also wouldn't
make sense to be added to an array, or maybe it will?

You could call them in a functional-style, but then you also need to pass a
dummy value as first argument.

    Option->all_valid($array_of_opt);
    Option::all_valid(undef, $array_of_opt);

=head2 Option->is_opt($any) : $bool

returns a truish value when C<$any> is an optional value.

    my $bool = Option->is_opt(Some({}));    # 1
    my $bool = Option->is_opt(Some(1));     # 1
    my $bool = Option->is_opt(None);        # 1
    my $bool = Option->is_opt(Some(undef)); # 1
    my $bool = Option->is_opt("");          # 0
    my $bool = Option->is_opt(0);           # 0
    my $bool = Option->is_opt([]);          # 0
    my $bool = Option->is_opt({}):          # 0

B<WARNING:> In probably 90% of all cases this is not the function you wanna use.
Some new people that are introduced to the idea of optional values usually might
use it like this.

    if ( Option->is_opt($any) && $any->is_some ) {
        my $value = $any->get;
    }


B<Don't do that.>

=over 4

=item First

Instead of C<< Option->is_opt >> you can use C<Option::is_some> or C<Option::is_none>
in a functional-style to also check C<$any> value. Those functions are written in a way
that they don't expect an optional value. You can directly do

    if ( Option::is_some($any) ) {
        my $value = $any->get
    }

This does the same and is shorter and clearer.

=item Second

Only call C<< Option->is_opt >> when you expect that a function can return many different
values of different types and you need to check if it is an optional value. Obviously
when you know that something should return an optional then trust it and just
use it as an optional. That's how dynamic-typing works.

That leads to the idea that very often you maybe want to check if you get
B<Some> value and do something with it. A first better aproach would be
to use C<match> instead.

    my $double =
        $option->match(
            Some => sub($x) { $x * 2 },
            None => sub     { 0      },
        );

In this case C<$double> will either be the double of C<$x> or C<0>.

=item Third

The above assumes that you know a default value to be used when the value is
B<None>. But what do you do when you don't know a default value at this place?
You could return an optional again.

    my $opt_double =
        $option->match(
            Some => sub($x) { Some($x * 2) },
            None => sub     { None         },
        );

but, this function is exactly what C<map> does! So instead write.

    my $opt_double = $option->map(sub($x) { $x * 2 });

Consider C<map> as a way to write code that only get's executed when you have
B<Some> value. Otherwise the code will not be executed.

When the code you pass to C<map> returns an optional you should use C<bind>
instead of C<map>.

=item Fourth

The idea of working with Optional values is that you keep working with an C<Option>
value as long as you can. Only at the very last step where you just need to
access the value then you usually either use C<match>, C<or>, C<or_with>, C<or_else>,
C<or_else_with> to extract the value. Also C<get> should be avoided if possible.

Use C<fold> when you want to extract the value and then transform it to something
else. Use C<iter> when you want to do just some side-effect with the value.

=back

=head2 Option->all_valid($array_of_opt)

Sometimes we have an array of optionals. Like C<[Some(1), Some(2), Some(3)]>.
But instead of an array of optionals we basically want to turn it inside-out.
We want an optional array C<Some([1,2,3])> instead. The idea is that we only
get C<Some> array when all values are C<Some>. As soon one value in the whole
array is C<None> we immediately just get C<None>. So we can validate all
values in a array at once.

Usually we get an array of optionals when we call an option generating function
on every element of an array. For example by using C<Array::map>.

    # is_num() is a function automatically imported by Sq. It is just a shortcut
    # for using Scalar::Util::looks_like_number()

    # an option generating function
    my $some_num = sub($str) { is_num($str) ? Some($str) : None };

    # Some([12, 100, 13])
    my $opt_nums =
        Option->all_valid(
            Array->new("12", "100", "13")->map($some_num)
        );

    # None
    my $opt_nums =
        Option->all_valid(
            Array->new("12", "100g", "13")->map($some_num)
        );

=head2 Option->all_valid_by($array, $f)

When you already have an array of optionals you use C<< Option->all_valid >>. But when
you want to run an optional generating function on every element of an array
and then call C<< Option->all_valid >> then you better use C<< Option->all_valid_by >>
that does both steps in one operation.

    # an option generating function
    my $some_num = sub($str) { is_num($str) ? Some($str) : None };

    # Some([12, 100, 13])
    my $opt_nums =
        Option->all_valid_by(Array->new("12", "100", "13"), $some_num);

    # Some([12, 100, 13])
    my $opt_nums =
        Option->all_valid_by(["12", "100", "13"], $some_num);

    # Some([12, 100, 13])
    my $opt_nums =
        Option->all_valid(
            Array->new("12", "100", "13")->map($some_num)
        );

=head2 Option->filter_valid($array)

Similar to C<< Option->all_valid >> but instead of becoming C<None> as soon one
value is C<None> in an array it just filters C<None> values out. Additional
an Sq array instead of an option is returned.

    my $nums = Option->filter_valid([Some(1), Some(2), Some(3)]); # [1,2,3]
    my $nums = Option->filter_valid([Some(1), Some(2),    None]); # [1,2]
    my $nums = Option->filter_valid([None]);                      # []
    my $nums = Option->filter_valid([]);                          # []

    my $opt_nums = Option->all_valid([Some(1), Some(2), Some(3)]); # Some([1,2,3])
    my $opt_nums = Option->all_valid([Some(1), Some(2),    None]); # None
    my $opt_nums = Option->all_valid([None])                       # None
    my $opt_nums = Option->all_valid([])                           # Some([])

=head2 Option->filter_valid_by($array, $f)

Like C<< Option->filter_valid >> but additionaly runs function C<$f> on every
element of C<$array> to create an option value first.

    # an option generating function
    my $some_num = sub($str) { is_num($str) ? Some($str) : None };

    my $nums = Option->filter_valid   ([ map { $some_num->($_) } 1,2,3 ]);       # [1,2,3]
    my $nums = Option->filter_valid   (Array->range(1,3)      ->map($some_num)); # [1,2,3]
    my $nums = Option->filter_valid   (Array->new(qw/1 foo 2/)->map($some_num)); # [1,2]
    my $nums = Option->filter_valid_by([qw/1 foo 2/], $some_num);                # [1,2]
