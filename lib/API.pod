# PODNAME:  Sq::API
# ABSTRACT: Function Overview

__END__

=pod

=encoding UTF-8

=head1 API

This contains an overview of all functions over the different packages

=head1 DEFAULT IMPORTS

    sq
    call
    key
    key_equal
    assign
    seq
    new

    is_num
    is_str
    is_array
    is_hash
    is_seq
    is_opt
    is_result
    is_sub
    is_regex
    is_ref
    is_type

    fn
    multi
    with_dispatch
    type_cond

    id
    fst
    snd
    copy

    by_num
    by_str
    by_stri

    array
    hash
    record

    Some
    None
    Ok
    Err
    lazy
    equal
    dump
    dumps
    type
    static
    union

=head1 MODULES

=head2 Sq->io

No functions yet.

=head2 Sq->fs

    Sq->fs->children     (@path)                # all folder entries as a sequence
    Sq->fs->read_text    (@path)                # sequence of file opened as UTF-8
    Sq->fs->read_text_gz (@path)                # opens gzip file as UTF-8 text
    Sq->fs->write_text   ($file, $content)      # writes $content as $file
    Sq->fs->write_text   ($file, $array_of_str) # writes array of strings as file
    Sq->fs->write_text   ($file, $seq)          # writes sequence as file
    Sq->fs->write_text_gz
    Sq->fs->read_raw
    Sq->fs->compare_text
    Sq->fs->read_bytes
    Sq->fs->make_link
    Sq->fs->recurse
    Sq->fs->search_upwards
    Sq->fs->sha512

=head2 Sq->math

    Sq->math->is_prime
    Sq->math->fac
    Sq->math->permute_count_up

=head2 Sq->fmt

    Sq->fmt->table(...) # Generates a table on console
    Sq->fmt->html(...)  # Generates HTML from a data-structure

=head2 Sq->bench

    Sq->bench->it     ($f)           # Measures execution time of $f
    Sq->bench->compare($time, $subs) # Calls Benchmark::cmpthese

=head2 Sq->rand

    Sq->rand->int($min, $max)         # sequence of random integer from $min to $max
    Sq->rand->num($min, $max)         # sequence of random number from $min to $max
    Sq->rand->str($min, $max)         # sequence of random strings of length $min to $max
    Sq->rand->str($min, $max, $chars) # sequence of random strings of length $min to $max that uses characters from $chars

=head2 Str

All functions are B<static>

    Str->chomp
    Str->chop
    Str->chunk
    Str->collapse
    Str->contains
    Str->chr
    Str->ends_with
    Str->escape_html
    Str->hex
    Str->keep
    Str->lc
    Str->length
    Str->map
    Str->nospace
    Str->ord
    Str->remove
    Str->repeat
    Str->reverse
    Str->starts_with
    Str->trim
    Str->uc

=head2 Static Functions

TODO: Describe what static means.

=head1 ARRAY

Variables that start with C<$f_> are functions.

    $f         # a function
    $f_num     # must return a number
    $f_str     # must return a string
    $f_map     # can return any value of any type
    $f_opt     # must return an option
    $f_key     # must return a key that is used as a key in a hash. So it must be a string.
    $predicate # A function that either returns 0 or 1

    # CONSTRUCTORS
    Array->empty     ()
    Array->one       ($x)
    Array->new       (@elems)
    Array->bless     ($array)
    Array->from_array($array)
    Array->replicate ($count, $init)
    Array->concat    (@arrays)
    Array->init      ($count, $f)
    Array->init2d    ($width, $height, $f)
    Array->unfold    ($state, $f_opt)
    Array->range     ($start, $stop)
    Array->range_step($start, $step, $stop)

    # METHODS
    all              ($array, $predicate)
    all_ok           ($array_of_results)
    all_ok_by        ($array, $f_result)
    all_some         ($array_of_options)
    all_some_by      ($array, $f_opt)
    any              ($array, $predicate)
    as_hash          ($array)
    average          ($array)
    average_by       ($array, $f_map)
    append           ($array1, $array2)
    bind             ($array, $f_array)
    cache            ($array)
    cartesian        (@arrays)
    choose           ($array, $f_opt)
    chunked          ($array, $size)
    chunked_size     ($array, $max_size, $f_size)
    columns          ($array, $amount)
    contains         ($array, $any)
    count            ($array)
    count_by         ($array, $f_key)
    copy             ($array)
    diff             ($arrayA, $arrayB, $f_key)
    distinct         ($array)
    distinct_by      ($array, $f_key)
    expand           ($array)
    extract          ($array, $pos, $length)
    fill             ($array, $upto, $f_any)
    find             ($array, $predicate)
    find_windowed    ($array, $amount, $predicate)
    first            ($array)
    fold             ($array, $state, $folder)
    fold_mut         ($array, $state, $folder)
    fold_rec         ($array, $f_init, $f_state)
    fsts             ($array)
    group_by         ($array, $f_key)
    group_fold       ($array, $f_init, $f_str, $f_state)
    head             ($array)
    index            ($array, $idx, $default=undef)
    indexed          ($array)
    intersect        ($arrayA, $arrayB, $f_key)
    intersperse      ($array, $value)
    is_empty         ($array)
    join             ($array, $sep="")
    keep             ($array, $predicate)
    keep_ok          ($array_of_results)
    keep_ok_by       ($array, $f_result)
    keep_some        ($array_of_opt)
    keep_some_by     ($array, $f_opt)
    keep_type        ($array, $type)
    keep_e           ($array, $expr)
    keyed_by         ($array, $f_key)
    last             ($array)
    length           ($array)
    map              ($array, $f_map)
    map2             ($arrayA, $arrayB, $f_map)
    map3             ($arrayA, $arrayB, $arrayC, $f_map)
    map4             ($arrayA, $arrayB, $arrayC, $arrayD, $f_map)
    mapi             ($array, $f_map)
    mapn             ($array, $count, $f_map)
    map_array        ($array, $f_map, $f_fold)
    map_e            ($array, $expr)
    map_rec          ($array, $f_map)
    max              ($array, $default=undef)
    max_by           ($array, $f_num)
    max_str          ($array, $f_str)
    max_str_by       ($array, $f_str)
    min              ($array, $default=undef)
    min_by           ($array, $f_num)
    min_str          ($array, $default=undef)
    min_str_by       ($array, $f_str)
    none             ($array, $predicate)
    permute          ($array)
    pick             ($array, $f_opt)
    reduce           ($array, $f)
    remove           ($array, $predicate)
    repeat           ($array, $count)
    rev              ($array)
    rx               ($array, $regex)
    rxm              ($array, $regex)
    rxs              ($array, $regex, $f)
    rxsg             ($array, $regex, $f)
    scan             ($array, $state, $f_state)
    shuffle          ($array)
    skip             ($array, $amount)
    skip_while       ($array, $predicate)
    slice            ($array, @idxs)
    split            ($array, $regex)
    snds             ($array)
    sort             ($array, $comparer)
    sort_by          ($array, $comparer, $f_key)
    sort_hash        ($array, $comparer, $key)
    sum              ($array)
    sum_by           ($array, $f_map)
    tail             ($array)
    take             ($array, $amount)
    take_while       ($array, $predicate)
    to_array         ($array, $count = undef)
    to_array_of_array($array)
    to_hash          ($array, $f_map)
    to_hash_of_array ($array, $f_map)
    to_seq           ($array)
    trim             ($array)
    windowed         ($array, $size)
    zip              (@arrays)

    # 2D Array
    fill2d       ($aoa, $f)
    map2d        ($aoa, $f)
    transpose    ($aoa)
    transpose_map($aoa,$f)

    # Mutation
    push   ($array, @values)
    pop    ($array)
    shift  ($array)
    unshift($array, @values)
    blit   ($source_array, $source_index, $target_array, $target_index, $amount)

    # Side-Effects
    iter     ($array, $f)
    itern    ($array, $amount, $f)
    iter_sort($array, $comparer, $f)
    iteri    ($array, $f)
    iter2d   ($aoa,   $f)

=head1 HASH

    # Constructors
    Hash->empty     ()
    Hash->new       (@args)
    Hash->bless     ($hash)
    Hash->locked    ($hash)
    Hash->init      ($amount, $f)
    Hash->from_array($array, $f)

    # Methods
    append      ($hashA, $hashB)
    bind        ($hash, $f)
    concat      (@hashes)
    copy        ($hash)
    diff        ($hashA, $hashB)
    extract     ($hash, @keys)
    find        ($hash, $predicate)
    fold        ($hash, $state, $f)
    fold_back   ($hash, $state, $f)
    get         ($hash, $key)
    has_keys    ($hash, @keys)
    intersect   ($hashA, $hashB, $f)
    is_empty    ($hash)
    is_subset_of($hash, $other)
    keep        ($hash, $predicate)
    keys        ($hash)
    length      ($hash)
    map         ($hash, $f)
    pick        ($hash, $f_opt)
    remove      ($hash, $predicate)
    slice       ($hash, @keys)
    to_array    ($hash, $f)
    union       ($hashA, $hashB, $f)
    values      ($hash)
    with        ($hash, @keys)
    withf       ($hash, %kfs)
    with_default($hash, %def)

    # Side-Effect
    iter     ($hash, $f)
    iter_sort($hash, $compare, $f)
    lock     ($hash, @keys)
    on       ($hash, %kfs)

    # Mutations
    change($hash, %kfs)
    delete($hash, @keys)
    push  ($hash, $key, @values)
    set   ($hash, @kvs)

=head1 Seq

TODO

=head1 Option

    # Constructors
    my $opt = Some(1);
    my $opt = Some(1,2,3);
    my $opt = None();

    # Methods
    bind        ($opt,  $f)
    bind2       ($opt,  $optA, $optB, $f)
    bind3       ($opt,  $optA, $optB, $optC, $f)
    bind4       ($opt,  $optA, $optB, $optC, $optD, $f)
    bind_v      (@opts, $f)
    check       ($opt, $predicate)
    fold        ($opt, $state, $f)
    fold_back   ($opt, $state, $f)
    get         ($opt)
    is_some     ($any)
    is_none     ($any)
    iter        ($opt, $f)
    match       ($opt,  Some => sub {}, None => sub {})
    map         ($opt,  $f)
    map2        ($optA, $optB, $f)
    map3        ($optA, $optB, $optC, $f)
    map4        ($optA, $optB, $optC, $optD, $f)
    map_v       (@opts, $f)
    or          ($opt,  @defaults)
    or_with     ($opt,  $f_x)
    or_else     ($opt,  $default_opt)
    or_else_with($opt,  $f_opt)
    single      ($opt)
    to_array    ($opt)
    to_seq      ($opt)
    validate    ($opt, $predicate)

    # Module Functions
    my ($bool, @values) = Option->extract(@any)

=head1 Result

    # Constructors
    my $res = Ok(1);
    my $res = Err(1);

    # Methods
    fold        ($res, $state, $f_state)
    get         ($res)
    is_ok       ($any)
    is_err      ($any)
    iter        ($res, $f)
    map         ($res, $f)
    map2        ($resA, $resB, $f)
    map3        ($resA, $resB, $resC, $f)
    map4        ($resA, $resB, $resC, $resD, $f)
    mapErr      ($res, $f)
    match       ($res, Ok => sub {}, Err => sub {})
    or          ($res, $default)
    or_with     ($res, $f)
    or_else     ($res, $defalut_result)
    or_else_with($res, $f_result)
    to_option   ($res)
    to_array    ($res)
    value       ($res)

=head1 Lazy

Lazy is like a normal anonymous subroutine function that evaluates it's body
only once and caches it's result. You can pass a lazy wherever a normal subroutine
is expected.

    my $sub   = lazy { ... };

    my $value = $sub->force();
    my $value = $sub->();
